{"version":3,"sources":["components/TodoForm.js","components/Todo.js","services/keys.js","services/TodoService.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","value","handleSubmit","preventDefault","onSubmit","id","text","className","edit","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","KEYS","todoId","insertTodo","data","getAllTodos","localStorage","getItem","setItem","parseInt","toString","generateTodoId","push","JSON","stringify","parse","TodoList","todoService","setTodos","test","updatedTodos","filter","cnt","newValue","todoIndex","findIndex","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a81f0be.chunk.js","sourcesContent":["import React, {useState,  useEffect, useRef } from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n    });\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = e =>{\r\n        e.preventDefault();\r\n        props.onSubmit({\r\n            id: null,\r\n            text: input\r\n          });\r\n        setInput('');\r\n      \r\n    }\r\n    return (\r\n    \r\n        <form onSubmit={handleSubmit} className='todo-form'>\r\n        {props.edit ? (\r\n          <>\r\n            <input\r\n              placeholder='Update your item'\r\n              value={input}\r\n              onChange={handleChange}\r\n              name='text'\r\n              ref={inputRef}\r\n              className='todo-input edit'\r\n            />\r\n            <button onClick={handleSubmit} className='todo-button edit'>\r\n              Update Todo\r\n            </button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <input\r\n              placeholder='Add a todo'\r\n              value={input}\r\n              onChange={handleChange}\r\n              name='text'\r\n              className='todo-input'\r\n              ref={inputRef}\r\n            />\r\n            <button onClick={handleSubmit} className='todo-button'>\r\n              Add todo\r\n            </button>\r\n          </>\r\n        )}\r\n      </form>\r\n            \r\n    \r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React, {useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\r\n    const [edit, setEdit] = useState({\r\n        id:null,\r\n        value:''\r\n    });\r\n    const submitUpdate = value => {\r\n      updateTodo(edit.id, value);\r\n      setEdit({\r\n        id: null,\r\n        value: ''\r\n      });\r\n    };\r\n  \r\n    if (edit.id) {\r\n      return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n    }\r\n    \r\n    return todos.map((todo, index)=>(\r\n    <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} key={index}>\r\n    <div key={todo.id} onClick={() => completeTodo(todo.id)}>{todo.text}</div>\r\n    <div className='icons'>\r\n        <RiCloseCircleLine\r\n          onClick={() => removeTodo(todo.id)}\r\n          className='delete-icon'\r\n        />\r\n        <TiEdit\r\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n          className='edit-icon'\r\n        />\r\n              </div>\r\n    </div>\r\n  ));\r\n};\r\n\r\nexport default Todo\r\n","const KEYS = {\r\n    todos: 'todos',\r\n    todoId: 'todoId',\r\n  };\r\n  \r\n  export default KEYS;","\r\nimport KEYS from './keys';\r\n\r\n// export function buildTodo(value) {\r\n//   return {\r\n//     id: 0,\r\n//     value: value,\r\n//   };\r\n// }\r\nexport function insertTodo(data) {\r\n  let todos = getAllTodos();\r\n//   data = buildTodo(data);\r\n  data['id'] = generateTodoId();\r\n  todos.push(data);\r\n  localStorage.setItem(KEYS.todos, JSON.stringify(todos));\r\n}\r\n\r\nexport function deleteTodo(id) {\r\n  let todos = getAllTodos();\r\n  todos = todos.filter((cnt) => cnt.id != id);\r\n  localStorage.setItem(KEYS.todos, JSON.stringify(todos));\r\n}\r\n\r\nexport function updateTodo(id, newValue) {\r\n    let todos = getAllTodos();\r\n    let todoIndex = todos.findIndex((todo => todo.id == id));\r\n    todos[todoIndex].text = newValue.text;\r\n    localStorage.setItem(KEYS.todos, JSON.stringify(todos));\r\n  }\r\n\r\nexport function generateTodoId() {\r\n  if (localStorage.getItem(KEYS.todoId) == null)\r\n    localStorage.setItem(KEYS.todoId, '0');\r\n  var id = parseInt(localStorage.getItem(KEYS.todoId));\r\n  localStorage.setItem(KEYS.todoId, (++id).toString());\r\n  return id;\r\n}\r\n\r\nexport function getAllTodos() {\r\n  if (localStorage.getItem(KEYS.todos) == null) {\r\n    localStorage.setItem(KEYS.todos, JSON.stringify([]));\r\n  }\r\n  return JSON.parse(localStorage.getItem(KEYS.todos));\r\n}\r\n\r\nexport function findById(id) {\r\n  let todos = getAllTodos();\r\n  return todos.filter((cnt) => cnt.id == id)[0];\r\n}","import React, { useState } from \"react\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport Todo from \"./Todo\";\r\nimport * as todoService from '../services/TodoService'\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState(todoService.getAllTodos());\r\n    const addTodo = (todo) => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n        }\r\n        todoService.insertTodo(todo);\r\n        // const newTodos = [todo, ...todos];\r\n        setTodos(todoService.getAllTodos());\r\n    };\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n        todoService.updateTodo(todoId,newValue);\r\n        // setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n        setTodos(todoService.getAllTodos())\r\n    };\r\n    const removeTodo = id => {\r\n        const removedArr = [...todos].filter(todo => todo.id !== id);\r\n        // call service of delete\r\n        todoService.deleteTodo(id);\r\n        setTodos(todoService.getAllTodos());\r\n    };\r\n\r\n\r\n\r\n    const completeTodo = (id) => {\r\n        let updatedTodos = todos.map((todo) => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n    return (\r\n        <div>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","\r\nimport './App.css';\r\nimport TodoForm from './components/TodoForm';\r\nimport TodoList from './components/TodoList';\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"todo-app\">\r\n      <h1>Todo App by Kumar Sumit</h1>\r\n      <h2><TodoList/></h2>\r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}